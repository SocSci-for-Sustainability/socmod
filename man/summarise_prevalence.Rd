% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analysis.R
\name{summarise_prevalence}
\alias{summarise_prevalence}
\title{Summarize behavior prevalence over time within or across trials}
\usage{
summarise_prevalence(
  trials_or_trial,
  input_parameters = NULL,
  tracked_behaviors = c("Adaptive"),
  across_trials = TRUE
)
}
\arguments{
\item{trials_or_trial}{\code{Trial} object or a list of \code{Trial} objects}

\item{input_parameters}{Character vector or NULL (default), required for list of \code{Trial} input}

\item{tracked_behaviors}{Character vector of behavior names to include in the summary.
Defaults to \code{"Adaptive"}.}

\item{between_trials}{Logical. If TRUE (default), returns a summary aggregated across trials.
If FALSE, returns per-trial prevalence values with a \code{trial_id} column distinguishing replicates.}
}
\value{
A tibble with columns:
\describe{
\item{Step}{The time step (from observations)}
\item{Behavior}{The behavior being tracked}
\item{Count}{The number of agents exhibiting this behavior at this Step}
\item{Prevalence}{The fraction of agents exhibiting this behavior (Count / n_agents)}
\item{trial_id}{The trial index (only included if \code{between_trials = FALSE})}
\item{\if{html}{\out{<input parameters>}}}{One column per input parameter in the Trial's model}
}
}
\description{
This function summarizes the prevalence of tracked behaviors over time,
either returning a summary for each individual trial or averaging across multiple trials.
Prevalence is normalized by the number of agents in each trial.
}
\examples{
abm_gen <- function(params) {
  params$graph <- make_small_world(params$n_agents, 6, 0.5)
  return (do.call(make_abm, params) \%>\%
            initialize_agents(
              initial_prevalence = params$initial_prevalence,
              adaptive_fitness = params$adaptive_fitness
            )
  )
}
adaptive_fitness_vals <- c(0.9, 1.1) 
trials <-
  run_trials(
    abm_gen,
    n_trials_per_param = 2,
    stop = socmod::fixated,
    n_agents = 20,
    initial_prevalence = 0.1,
    adaptive_fitness = adaptive_fitness_vals
)
summary <- summarise_prevalence(
  trials, input_parameters = "adaptive_fitness", across_trials = F
) \%>\% 
  dplyr::mutate(
    `Adaptive fitness` = factor(adaptive_fitness, adaptive_fitness_vals)
  )

}
